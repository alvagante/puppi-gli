#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'puppi'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  exit 64
end

include GLI::App

program_desc 'Puppet knowledge to the CLI and Applications Deployment'

version Puppi::VERSION

desc 'Interactive mode. Ask to confirmation for every action'
switch [:i,:interactive]

desc 'Force mode. Force execution of commands also on critical errors'
switch [:f,:force]

desc 'Test mode. Do not execute anything. Make a dryrun test.'
switch [:t,:test]

desc 'Silent mode. Suppress any output. Show only errors'
switch [:s,:silent]

desc 'Verbose mode. Show more verbose output'
switch [:v,:verbose]

desc 'Reporting and notification methods'
default_value 'stdout'
arg_name 'method'
flag [:r,:report]

### CHECK
desc 'Runs system Checks'
long_desc """
With puppi check you have an instant view of the functionality of your system and the installed applications.\n
Checks are generally based on Nagios plugins but can be any kind of script with similar exit codes (1 for Warning, 2 for Critical).
The commands used to show information can be defined in 2 places:\n
- Puppi Old Style approach looks for files in /etc/puppi/checks populated with the puppi::check define.\n
- Puppi New Style gets the data in /etc/puppi/data/ (generated by the puppi::ze define) and executes the check commands defined in the relevant helper file /etc/puppi/helpers/ (created by the puppi::helper define)\n
If you don't specify any topic all checks are shown.\n
Use the --interactive global option to select manually only the checks you want to show.\n
Use the --silent option to show only failures.
"""
arg_name '[topic]'
command :check do |c|
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "check command ran"
  end
end

### LOG
desc 'Shows system and applications logs'
long_desc """
With puppi log you can show all the logs configured via Puppet for this system and the installed applications.\n
By default the equivalent of tail -f is done (Press CRTL+C to exit).\n
The paths of the logs to show can be defined in 2 places:\n
- Puppi Old Style approach looks for files in /etc/puppi/logs populated with the puppi::log define.\n
- Puppi New Style gets the data in /etc/puppi/data/ (generated by the puppi::ze define) and executes the log commands defined in the relevant helper file /etc/puppi/helpers/ (created by the puppi::helper define)\n
If you don't specify any topic all logs are shown.\n
Use the --interactive global option to select manually only the logs you want to show.\n
Use the --grep option to grep only the defined regexp from the log output.\n
"""
arg_name '[topic]'
command :log do |c|
  c.desc 'Grep the defined RegExp from the output'
  c.default_value ''
  c.flag [:g,:grep]

  c.action do |global_options,options,args|
    puts "log command ran"
  end
end

### INFO
desc 'Shows system and applications realtime infos'
long_desc """
With puppi info you view the output of various information commands configured via Puppet for this system and the installed applications.\n
The commands used to show information can be defined in 2 places:\n
- Puppi Old Style approach looks for files in /etc/puppi/info populated with the puppi::info define.\n
- Puppi New Style gets the data in /etc/puppi/data/ (generated by the puppi::ze define) and executes the info commands defined in the relevant helper file /etc/puppi/helpers/ (created by the puppi::helper define)\n
If you don't specify any topic all infos are shown (the output can be quite large).\n
Use the --interactive global option to select manually only the infos you want to show.\n
Use the --grep option to grep only the defined regexp from the info output.\n
"""
arg_name '[topic]'
command :info do |c|
  c.desc 'Grep the defined RegExp from the output'
  c.default_value ''
  c.flag [:g,:grep]

  c.action do |global_options,options,args|
    puts "info command ran"
  end
end

### TODO
desc 'Shows TODOs'
long_desc """
Shows existing TODO on this server.\n
TODOs are reminders for activities that should be done on the serer for complete setup and that have not been puppetized.\n
With the puppi::todo define you can specify the TODO description and a command to run to verify if the TODO has been done.\n
"""
arg_name '[topic]'
command :todo do |c|
  c.action do |global_options,options,args|
    puts "todo command ran"
  end
end

### INIT
desc 'Runs Application Initialization'
long_desc """
With puppi init you can run the first time setup of a <project>.\n
A project is typically a web application that has to be deployed on the server via puppi.\n
The init action executes all the commands present in /etc/puppi/projects/<name_of_project>/initialize.\n
Puppi init is not always present and is intended to be run only once and the first time, if something different from a normal deploy has to be done on the system.\n
"""
arg_name '<project>'
command :init do |c|
  c.action do |global_options,options,args|
    puts "init command ran"
  end
end

desc 'Runs Application Deployment'
long_desc """
With puppi deploy you can manage application (here called 'project') deployments of different kind.\n
A project is typically a web application whose deployment procedure is entirely defined via the Puppi Puppet module.\n
The deploy action executes all the commands present in /etc/puppi/projects/<name_of_project>/deploy.\n
Single deploy commands are managed by the puppi::deploy define but generally you use the higher level defines in puppi::project::<war|git|tar|dir|...> to automatically populate the deploy (and rollback) commands.\n
"""
arg_name '<project>'
command :deploy do |c|
  c.action do |global_options,options,args|
    puts "deploy command ran"
  end
end

desc 'Runs Application Rollback'
long_desc """
With puppi rollback you can rollback a previously deployed <project>.\n
The rollback action executes all the commands present in /etc/puppi/projects/<name_of_project>/rollback.\n
Generally the rollback places back the files present on the destination directory before previous deploys, but it can do more complex activities if configured.\n
Write 'puppi rollback <project> latest' to rollback the specified project to the state before the latest deployment, or just 'puppi rollback <project>' to select which backup to rollback.\n
"""
arg_name '<project>'
command :rollback do |c|
  c.action do |global_options,options,args|
    puts "rollback command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
